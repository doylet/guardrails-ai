#!/usr/bin/env python3
"""
Infrastructure-as-Code Bootstrap Manager
Reads installation-manifest.yaml for dynamic file discovery
NO hardcoded file lists in shell scripts!
"""

import argparse
import sys
from pathlib import Path

# Add src to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from packages import InfrastructureBootstrap


def main():
    parser = argparse.ArgumentParser(description='Infrastructure-as-Code Bootstrap Manager')
    parser.add_argument('--manifest', default='src/installation-manifest.yaml',
                       help='Installation manifest file')
    parser.add_argument('--template-repo', default=None,
                       help='Template repository path (defaults to manifest setting)')
    parser.add_argument('--target', default='.',
                       help='Target installation directory')
    parser.add_argument('--force', action='store_true',
                       help='Overwrite existing files')

    subparsers = parser.add_subparsers(dest='command', help='Commands')

    # Init command - one-click installation
    init_parser = subparsers.add_parser('init', help='One-click installation with smart defaults')
    init_parser.add_argument('--profile', default='auto',
                            choices=['auto', 'minimal', 'standard', 'full'],
                            help='Installation profile (default: auto-detect)')
    init_parser.add_argument('--dry-run', action='store_true',
                            help='Show what would be installed without applying')

    # Install profile
    install_parser = subparsers.add_parser('install', help='Install a profile')
    install_parser.add_argument('profile', help='Profile to install')

    # Install component
    component_parser = subparsers.add_parser('component', help='Install specific component')
    component_parser.add_argument('component', help='Component to install')

    # Doctor workflow
    doctor_parser = subparsers.add_parser('doctor', help='Validate installation integrity')
    doctor_parser.add_argument('focus', nargs='?', default='all',
                              choices=['all', 'yaml'],
                              help='Focus area for diagnostics (default: all)')

    # List commands
    subparsers.add_parser('list-components', help='List available components')
    subparsers.add_parser('list-profiles', help='List available profiles')
    subparsers.add_parser('show-state', help='Show current installation state')

    # Discover what files would be installed
    discover_parser = subparsers.add_parser('discover', help='Show what files would be installed')
    discover_parser.add_argument('component', help='Component to analyze')

    # Debug discovery with verbose output
    debug_discover_parser = subparsers.add_parser('debug-discover', help='Debug component file discovery with verbose output')
    debug_discover_parser.add_argument('component', help='Component to debug')

    args = parser.parse_args()

    try:
        bootstrap = InfrastructureBootstrap(target_dir=args.target)

        if args.command == 'init':
            success = bootstrap.init(profile=args.profile, dry_run=args.dry_run)
        elif args.command == 'install':
            success = bootstrap.install_profile(args.profile, force=args.force)
        elif args.command == 'component':
            success = bootstrap.install_component(args.component, force=args.force)
        elif args.command == 'doctor':
            success = bootstrap.doctor(focus=args.focus)
        elif args.command == 'list-components':
            bootstrap.list_all_components()
            success = True
        elif args.command == 'list-profiles':
            bootstrap.list_all_profiles()
            success = True
        elif args.command == 'show-state':
            bootstrap.show_state()
            success = True
        elif args.command == 'discover':
            bootstrap.list_discovered_files(args.component)
            success = True
        elif args.command == 'debug-discover':
            bootstrap.debug_discover(args.component)
            success = True
        else:
            parser.print_help()
            success = False

        sys.exit(0 if success else 1)

    except Exception as e:
        print(f"ERROR: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == '__main__':
    main()
